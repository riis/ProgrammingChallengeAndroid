// Code generated by dagger-compiler.  Do not edit.
package com.riis.models;

import java.util.Set;

import javax.inject.Provider;

import com.riis.controllers.textMessage.TextMessageSender;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;

/**
 * A {@code Binding<TextMessageSender>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code TextMessageSender} and its
 * dependencies.
 *
 * Being a {@code Provider<TextMessageSender>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<TextMessageSender>} and handling injection
 * of annotated fields.
 */
public final class TextMessageSender$$InjectAdapter extends Binding<TextMessageSender>
    implements Provider<TextMessageSender>, MembersInjector<TextMessageSender> {
  private Binding<ContactList> contactList;

  public TextMessageSender$$InjectAdapter() {
    super("com.riis.models.TextMessageSender", "members/com.riis.models.TextMessageSender", NOT_SINGLETON, TextMessageSender.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    contactList = (Binding<ContactList>) linker.requestBinding("com.riis.models.ContactList", TextMessageSender.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(contactList);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<TextMessageSender>}.
   */
  @Override
  public TextMessageSender get() {
    TextMessageSender result = new TextMessageSender();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<TextMessageSender>}.
   */
  @Override
  public void injectMembers(TextMessageSender object) {
    //object.contactList = contactList.get();
  }

}
